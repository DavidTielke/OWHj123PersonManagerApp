<?xml version="1.0" encoding="utf-8"?>
<Queries>
  <Group Name="Modularisierung" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Methoden die mögl. SRP verletzen</Name>
warnif count > 0 
from m in JustMyCode.Methods
where
 m.NbLinesOfCode > 2 ||
 m.CyclomaticComplexity > 7 ||
 m.NbParameters > 5
select new { m.ParentType, m, m.NbLinesOfCode, m.CyclomaticComplexity, m.NbParameters } 
]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="True"><![CDATA[// <Name>Klassen die mögl. SRP verletzten</Name>
warnif count > 0 
from t in JustMyCode.Types
let ctorValidations = t.Constructors.Where(c => c.NbParameters > 5)
let severity = t.NbLinesOfCode > 4 ? Severity.Blocker : Severity.Medium
let debt = t.NbLinesOfCode.Linear(4, 5, 400, 50)
where
 t.NbLinesOfCode > 2 ||
 t.NbMethods > 10 ||
 ctorValidations.Any()

select new{t, t.NbLinesOfCode, t.NbMethods, ctorValidations, severity, debt}]]></Query>
  </Group>
  <Group Name="Namensmuster" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Klassen die keinem Namensmuster folgen</Name>
warnif count > 0 
from t in JustMyCode.Types.Where(t => !t.ParentNamespace.NameLike("DataClasses"))
let namenpatterns = new[]{"Manager","Repository","Parser"}
where !t.IsGeneratedByCompiler &&
 !namenpatterns.Any(np=> t.Name.EndsWith(np))
select new { t, Severity = Severity.Critical }

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <TrendMetric Name="Grad Musterkonsistenz" Unit="%" />  

// #### BLACKLISTING
let blacklistNamespaceSuffix = new string[]{"DataClasses"}
let blacklistNamespacePrefix = new string[]{}

let typesFiltered = JustMyCode.Types
                    .Where(t => !t.IsGeneratedByCompiler)
                    .Where(t => blacklistNamespaceSuffix.All(bns => !t.ParentNamespace.Name.EndsWith(bns)))
                    .Where(t => blacklistNamespacePrefix.All(bns => !t.ParentNamespace.Name.StartsWith(bns)))

// #### NAMENSMUSTER
let namePatterns = new string[] 
{
 "Manager",
 "Repository",
 "Parser"
}

// #### ABFRAGE
let typesFollowingPatterns = typesFiltered.Where(t => namePatterns.Any(np => t.SimpleName.EndsWith(np)))
let typesNotFollowingPatterns = typesFiltered.Where(t => !namePatterns.Any(np => t.SimpleName.EndsWith(np)))
select 100d * typesFollowingPatterns.Count() / typesFiltered.Count()

]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Verstöße Namensmuster Manager</Name>
warnif count > 0 
from t in JustMyCode.Types.Where(type => type.SimpleName.EndsWith("Manager"))
let allowedMethods = new[]{"Add","Remove","Update"}
let allowedPrefixes = new[]{"Get","Is","Are"}
let violatingMethods = t.Methods.Where(m => !(allowedMethods.Any(m1 => m1 == m.SimpleName) 
                                              || allowedPrefixes.Any(m1 => m.SimpleName.StartsWith(m1))))

where violatingMethods.Count() > 0
select new { t, violatingMethods, Severity = Severity.Critical}
]]></Query>
  </Group>
  <Group Name="Architektur" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="True"><![CDATA[// <Name>Domain-Komonenten dürfen keine Kopplung haben</Name>
warnif count > 0 
from a in JustMyCode.Assemblies.Where(ass => ass.ChildNamespaces.Any(ns => ns.NameLike("Logic.Domain")))
let usedAssemblies = a.AssembliesUsed.Where(ass => ass.ChildNamespaces.Any(cns => cns.NameLike("Logic.Domain")))
where usedAssemblies.Count() > 0
select new { a, usedAssemblies, severity = Severity.Blocker}]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Impl. Assemblies dürfen nur auf Contracts zugreifen</Name>
warnif count> 0

let excludedAssemblies = new[]{"DataClasses","Mappings"}

from a in JustMyCode.Assemblies
                     .Where(t1 => excludedAssemblies.All(a3 => t1.Name != a3))
                     .Where(a1 => !a1.Name.EndsWith(".Contract"))

let assembliesUsed = a.AssembliesUsed
                     .Where(a1 => !a1.IsThirdParty)
                     .Where(a1 => excludedAssemblies.All(a2 => a2 != a1.Name))

let forbiddenAssemblies = assembliesUsed.Where(a1 => !a1.Name.EndsWith(".Contract"))

where forbiddenAssemblies.Count() > 0

select new { a, forbiddenAssemblies, Severity = Severity.Blocker }]]></Query>
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="False"><![CDATA[// <Name>Basisexception in jeder Komponente</Name>
warnif count> 0


from a in JustMyCode.Assemblies.Where(a1 => a1.Name.EndsWith(".Contract"))
let exceptionTypes = a.ChildTypes.Where(t => t.NameLike("Exception") && t.BaseClass.FullName == "System.Exception")

where exceptionTypes.Count() == 0

select new { a }]]></Query>
  </Group>
  <Group Name="Abhängigkeiten" Active="True" ShownInReport="False">
    <Query Active="True" DisplayList="True" DisplayStat="True" DisplaySelectionView="False" IsCriticalRule="True"><![CDATA[// <Name>Keine direkte Abh. zwischen Logik Klassen</Name>
warnif count > 0

let ignoredClasses = new[]{"Program","KernelFactory"}

from t in JustMyCode.Types.Where(t1 => !t1.IsInterface).Where(t1 => !ignoredClasses.Contains(t1.SimpleName))

let ownTypesUsed = t.TypesUsed.Where(t1 => !t1.IsGeneratedByCompiler && !t1.IsThirdParty && !t1.ParentNamespace.NameLike("DataClasses"))
let violations = ownTypesUsed.Where(t1 => !t1.IsInterface)

where !t.IsGeneratedByCompiler
 && !t.ParentNamespace.NameLike("DataClasses")
 && !ownTypesUsed.All(t1 => t1.IsInterface)
select new { t, violations, Severity = Severity.Critical }

]]></Query>
  </Group>
</Queries>